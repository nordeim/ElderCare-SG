name: QA CI

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]

permissions:
  contents: read
  actions: read

jobs:
  qa:
    name: Laravel & Frontend QA
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel
          MYSQL_USER: sail
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    env:
      APP_ENV: testing
      APP_KEY: base64:QaO7U9M2Qn+M1sw7zfvBn6p2n2jfEv1wT+fyvuk2WUU=
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: laravel
      DB_USERNAME: sail
      DB_PASSWORD: password
      ANALYTICS_DRIVER: plausible

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo_mysql, bcmath
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Install NPM dependencies
        run: npm ci

      - name: Generate application key
        run: php artisan key:generate --force

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run Phase 6/7 PHPUnit suite
        run: php artisan test --group=phase6

      - name: Run accessibility lint
        run: npm run lint:accessibility

      - name: Run Lighthouse audit
        run: npm run lighthouse -- --preset=ci
        continue-on-error: true

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: storage/app/lighthouse
